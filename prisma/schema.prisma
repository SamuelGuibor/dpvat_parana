generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  cpf             String?   
  data_nasc       DateTime?
  email           String    @unique
  nome_res        String?
  rg_res          String?
  cpf_res         String?
  estado_civil_res String?
  profissao_res   String?
  password        String?
  rua             String?
  bairro          String?
  numero          String?
  cep             String?
  image           String?
  emailVerified   DateTime?
  role            String    @default("Aplicar Filtro DPVAT")
  rg              String?
  nome_mae        String?
  telefone        String?
  cidade          String?
  estado          String?
  estado_civil    String?
  profissao       String?
  nacionalidade   String?
  data_acidente   DateTime?
  atendimento_via String?
  hospital        String?
  outro_hospital  String?
  lesoes          String?
  statusStartedAt DateTime?
  service         String?
  obs             String?

  accounts  Account[]
  sessions  Session[]
  document  Document[]
  processes Process[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  status   Status?
}

model Process {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            String? 
  statusStartedAt DateTime? 
  data_acidente   DateTime?
  atendimento_via String?
  hospital        String?
  outro_hospital  String?
  lesoes          String?
  type            String?  
  observacao      String
  documents       Document[] 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  status Status?
}

enum Status {
  INICIADO
  AGUARDANDO_ASSINATURA
  SOLICITAR_DOCUMENTOS
  COLETA_DOCUMENTOS
  ANALISE_DOCUMENTOS
  PERICIAL
  AGUARDANDO_PERICIAL
  PAGAMENTO_HONORARIO
  PROCESSO_ENCERRADO
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Message {
  id           String         @id @default(cuid())
  titulo       String
  role         String         @default("USER")
  multipleMessages SubMessage[]
}

model SubMessage {
  id         String   @id @default(cuid())
  conteudo   String
  mediaUrl   String?
  mediaType  String?
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Document {
  id         String   @id @default(uuid())
  userId     String
  processId  String?
  key        String
  name       String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  process    Process? @relation(fields: [processId], references: [id], onDelete: Cascade)
}